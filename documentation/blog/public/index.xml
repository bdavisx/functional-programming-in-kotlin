<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bill Davis&#39;s Blog</title>
    <link>http://billdavis.ws/index.xml</link>
    <description>Recent content on Bill Davis&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Oct 2016 12:29:04 -0500</lastBuildDate>
    <atom:link href="http://billdavis.ws/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exercises 2.1 (fibonacci) and 2.2 (higher order functions)</title>
      <link>http://billdavis.ws/post/exercise-2/</link>
      <pubDate>Fri, 28 Oct 2016 12:29:04 -0500</pubDate>
      
      <guid>http://billdavis.ws/post/exercise-2/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m going to be writing about implementing exercises from &amp;ldquo;Functional Programming in Scala&amp;rdquo; (FPiS)
using the Kotlin language.&lt;/p&gt;

&lt;h1 id=&#34;exercise-2-1-fibonacci&#34;&gt;Exercise 2.1 - Fibonacci&lt;/h1&gt;

&lt;p&gt;The first exercise is to write a fibonacci function that is tail recursive. The result is similar to
the Scala version.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;fibonacci()&lt;/code&gt; function starts out by declaring an local function that does most of the work.
With Kotlin, you can just return the value of the &lt;code&gt;when()&lt;/code&gt; statement directly, without needing to
create a variable. The &lt;code&gt;loop()&lt;/code&gt; function just counts the sequence down, adding each value as it
counts down. When it gets to 0, it has added all of the elements together and returns the result. I
marked the function as tail recursive, which was one of the points of the exercise. If the function
you create is not tail recursive and you mark it with &lt;code&gt;tailrec&lt;/code&gt;, you will get a warning from the
compiler. I created a test using &lt;a href=&#34;https://jetbrains.github.io/spek/&#34;&gt;Spek&lt;/a&gt;, then copied the
expected values from a website.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 1 &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;fibonacci&lt;/span&gt;(n: Int): Int {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 2 &lt;/span&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;tailrec&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;loop&lt;/span&gt;(n: Int, previous: Int, current: Int): Int {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 3 &lt;/span&gt;        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;when&lt;/span&gt;(n) {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 4 &lt;/span&gt;            &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; -&amp;gt; previous
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 5 &lt;/span&gt;            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; -&amp;gt; loop(n-&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, current, previous+current)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 6 &lt;/span&gt;        }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 7 &lt;/span&gt;    }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 8 &lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 9 &lt;/span&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; loop(n, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;10 &lt;/span&gt;}
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;11 &lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;12 &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Ch02Test&lt;/span&gt; : Spek({
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;13 &lt;/span&gt;    describe(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;fibonacci function&amp;quot;&lt;/span&gt;) {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;14 &lt;/span&gt;        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; expectedValues = arrayOf(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;144&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;233&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;377&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;610&lt;/span&gt;,
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;15 &lt;/span&gt;            &lt;span style=&#34;color: #666666&#34;&gt;987&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1597&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2584&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4181&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6765&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10946&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;17711&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;28657&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;46368&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;75025&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;121393&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;196418&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;317811&lt;/span&gt;)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;16 &lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;17 &lt;/span&gt;        it(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;should return the correct first value&amp;quot;&lt;/span&gt;) {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;18 &lt;/span&gt;            assertEquals(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, fibonacci(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;))
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;19 &lt;/span&gt;        }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;20 &lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;21 &lt;/span&gt;        it(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;should return the correct values in expectedValues&amp;quot;&lt;/span&gt;) {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;22 &lt;/span&gt;            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;( i &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.&lt;/span&gt;.(expectedValues.size-&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) ) {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;23 &lt;/span&gt;                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; value = fibonacci(i)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;24 &lt;/span&gt;                assertEquals(expectedValues[i], value)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;25 &lt;/span&gt;            }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;26 &lt;/span&gt;        }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;27 &lt;/span&gt;    }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;28 &lt;/span&gt;})  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I considered an &lt;code&gt;if/else&lt;/code&gt; statement in the &lt;code&gt;loop()&lt;/code&gt; inner function, but I think the &lt;code&gt;when()&lt;/code&gt; version
is more compact and &lt;a href=&#34;https://kotlinlang.org/docs/reference/idioms.html&#34;&gt;idiomatic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 1 &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;fibonacci2&lt;/span&gt;(n: Int): Int {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 2 &lt;/span&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;tailrec&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;loop&lt;/span&gt;(n: Int, previous: Int, current: Int): Int {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 3 &lt;/span&gt;        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;( n == &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; ) {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 4 &lt;/span&gt;            previous
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 5 &lt;/span&gt;        } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 6 &lt;/span&gt;            loop(n-&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, current, previous+current)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 7 &lt;/span&gt;        }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 8 &lt;/span&gt;    }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 9 &lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;10 &lt;/span&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; loop(n, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;11 &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;exercise-2-2-issorted-higher-order-function&#34;&gt;Exercise 2.2 - isSorted Higher Order Function&lt;/h1&gt;

&lt;p&gt;This exercise is &amp;ldquo;Implement isSorted, which checks whether an Array[A] is sorted according to a
given comparison function.&amp;rdquo; We need to use a local function again to be able to be tail recursive.
The &lt;code&gt;loop()&lt;/code&gt; function takes a &lt;code&gt;current&lt;/code&gt; array index and if we&amp;rsquo;ve reached the end of the array (line
4), we return &lt;code&gt;true&lt;/code&gt;, the entire array is sorted. Otherwise we check to see if the current element
is greater than the previous element. If not, we return false and short-circuit the check (line 6).
Otherwise we recursively call ourself with the next array index.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;loop()&lt;/code&gt; function has access to all of the parameters passed into the parent function. So it
does not need the array or ordered parameters to be passed to it.&lt;/p&gt;

&lt;p&gt;Outside the local &lt;code&gt;loop()&lt;/code&gt; function (line 13), we first do a check, if the array is empty, we
just return true, otherwise we start the recursive &lt;code&gt;loop()&lt;/code&gt; call.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 1 &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;A&lt;/span&gt;&amp;gt; isSorted(array: Array&amp;lt;A&amp;gt;, ordered: (A,A) -&amp;gt; Boolean): Boolean {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 2 &lt;/span&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;tailrec&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;loop&lt;/span&gt;(current: Int): Boolean {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 3 &lt;/span&gt;        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;when&lt;/span&gt;(current) {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 4 &lt;/span&gt;            array.size -&amp;gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt; }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 5 &lt;/span&gt;            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; -&amp;gt; {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 6 &lt;/span&gt;                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(!ordered(array[current-&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;], array[current])) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt; }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 7 &lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 8 &lt;/span&gt;                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; loop(current+&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 9 &lt;/span&gt;            }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;10 &lt;/span&gt;        }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;11 &lt;/span&gt;    }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;12 &lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;13 &lt;/span&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(array.size == &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;14 &lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;15 &lt;/span&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; loop(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;16 &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;using-a-higher-order-function-with-testing&#34;&gt;Using a Higher Order Function with Testing&lt;/h2&gt;

&lt;p&gt;After I wrote the &lt;code&gt;fibonacci2()&lt;/code&gt; function (the &lt;code&gt;if/then&lt;/code&gt; version), I basically copied the test and
called &lt;code&gt;fibonacci2()&lt;/code&gt; instead, then refactored the test to use a higher-order function that would
run the tests for both functions. The &lt;code&gt;runFibonacciTests()&lt;/code&gt; (line 5) function takes as a parameter,
a function that gets passed and int and returns an int. That signature is the same as both of the
fibonacci functions, so we can just pass those to the function to run the tests (lines 19-20).&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 1 &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Ch02Test&lt;/span&gt; : Spek({
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 2 &lt;/span&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; expectedValues = arrayOf(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;144&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;233&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;377&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;610&lt;/span&gt;,
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 3 &lt;/span&gt;        &lt;span style=&#34;color: #666666&#34;&gt;987&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1597&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2584&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4181&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6765&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10946&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;17711&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;28657&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;46368&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;75025&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;121393&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;196418&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;317811&lt;/span&gt;)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 4 &lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 5 &lt;/span&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;runFibonacciTests&lt;/span&gt;(function: (Int) -&amp;gt; Int) {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 6 &lt;/span&gt;        it(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;should return the correct first value&amp;quot;&lt;/span&gt;) {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 7 &lt;/span&gt;            assertEquals(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, function(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;))
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 8 &lt;/span&gt;        }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 9 &lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;10 &lt;/span&gt;        it(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;should return the correct values in expectedValues&amp;quot;&lt;/span&gt;) {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;11 &lt;/span&gt;            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;( i &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.&lt;/span&gt;.(expectedValues.size-&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) ) {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;12 &lt;/span&gt;                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; value = function(i)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;13 &lt;/span&gt;                assertEquals(expectedValues[i], value)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;14 &lt;/span&gt;            }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;15 &lt;/span&gt;        }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;16 &lt;/span&gt;    }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;17 &lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;18 &lt;/span&gt;    describe(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;fibonacci functions&amp;quot;&lt;/span&gt;) {
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;19 &lt;/span&gt;        runFibonacciTests(&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;fibonacci)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;20 &lt;/span&gt;        runFibonacciTests(&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;fibonacci2)
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;21 &lt;/span&gt;    }
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;22 &lt;/span&gt;}  
&lt;/pre&gt;&lt;/div&gt;

</description>
    </item>
    
  </channel>
</rss>